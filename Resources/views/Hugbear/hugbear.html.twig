<canvas id="hugbear_canvas" style="position:fixed;top:0px;left:0px;pointer-events:none"></canvas>
<script type="text/javascript">
if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = (function(){
      return  window.requestAnimationFrame       || 
              window.webkitRequestAnimationFrame || 
              window.mozRequestAnimationFrame    || 
              window.oRequestAnimationFrame      || 
              window.msRequestAnimationFrame     || 
              function( callback ){
                window.setTimeout(callback, 1000 / 60);
              };
    })();
}

var {{ objname }} = {
    activated: false,
    config: {{ hugbearconfig|json_encode|raw }},
    texting: {},
    show: function() {
        this.activated = true;
        if (localStorage && localStorage.setItem) {
            localStorage.setItem('hugbears_activated', true);
        }
        this.canvas=document.getElementById('hugbear_canvas');
        this.context=this.canvas.getContext('2d');
        if (!this.context) {
            if (console && console.log) {
                console.log('Canvas not supported!');
            }
            return;
        }
        this.img=new Image();
        var self=this;
        this.img.onload = function() {
            self.canvas.setAttribute('width', window.innerWidth);
            self.canvas.setAttribute('height', window.innerHeight);
            self.hugbears = [];
            for (var i = 0; i < self.config.hugbears; i++) {
                self.hugbears.push({ position: [ Math.random() * self.canvas.width, Math.random() * self.canvas.height],
                    rotation: Math.random() * 360 * Math.PI / 180,
                    srotation: self.config.minrotation + (self.config.maxrotation-self.config.minrotation) * Math.random() *  (Math.random() > 0.5 ? -1 : 1),
                    sx: self.config.minspeed + (self.config.maxspeed-self.config.minspeed) * Math.random() * (Math.random() > 0.5 ? -1 : 1),
                    sy: self.config.minspeed + (self.config.maxspeed-self.config.minspeed) * Math.random() * (Math.random() > 0.5 ? -1 : 1)
                });
            }
            self.animate();
        };
        this.img.src = '{{ asset('bundles/mophugbear/images/hugbear.png') }}';
        window.onresize = function() {
            if (!self.activated)
                return;
            self.canvas.setAttribute('width', window.innerWidth);
            self.canvas.setAttribute('height', window.innerHeight);
            for (var i = 0; i < self.config.hugbears; i++) {
                if (self.hugbears[i].position[0] > self.canvas.width) {
                    self.hugbears[i].position[0] = self.canvas.width;
                }
                if (self.hugbears[i].position[1] > self.canvas.height) {
                    self.hugbears[i].position[1] = self.canvas.height;
                }
            }
        };
    },
    drawText: function() {
        var text = this.config.text;
        this.context.font = this.config.fontsize + "px " + this.config.fontfamily;
        var metric = this.context.measureText(text);

        var margin = 5;

        this.context.beginPath();
        this.context.moveTo(0 , -this.img.height/2);
        this.context.lineTo(-5, -this.img.height/2 -5);
        
        this.context.lineTo(-metric.width/2 -margin, -this.img.height/2 - 5);
        this.context.quadraticCurveTo(-metric.width/2-margin-10, -this.img.height/2 -5 -this.config.fontsize/2 - margin, -metric.width/2 -margin, -this.img.height/2 -5 - this.config.fontsize - 2*margin);
        this.context.lineTo(metric.width/2+margin, -this.img.height/2 -5 - this.config.fontsize - 2*margin);
        this.context.quadraticCurveTo(metric.width/2+margin+10, -this.img.height/2 -5 -this.config.fontsize/2 - margin, metric.width/2+margin, -this.img.height/2 -5);
        this.context.lineTo(metric.width/2 + margin, -this.img.height/2 -5);

        this.context.lineTo(5, -this.img.height/2 -5);
        this.context.closePath();
        this.context.fillStyle = 'white';
        this.context.strokeStyle = 'black';
        this.context.stroke();
        this.context.fill();
        
        this.context.fillStyle = "black";
        this.context.textAlign = "center";
        this.context.textBaseline = "middle";
        this.context.fillText(text, 0, -5-this.img.height/2-margin-this.config.fontsize/2);
    },
    animate: function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        var tmp;
        var self = this;
        if (!this.activated)
            return;

        requestAnimationFrame(function() {
            return self.animate();
        }); 
        var date = new Date();
        var ms = date.getTime();
        while (Object.keys(this.texting).length < this.config.talkingbears) {
            var index = Math.round(Math.random() * (this.hugbears.length-1));
            this.texting[index] = ms + Math.round(Math.random() * (this.config.maxtextshow - this.config.mintextshow)) + this.config.mintextshow;
        }
        for (var i=0;i<this.hugbears.length;i++) {
            var hugbear=this.hugbears[i];
            hugbear.rotation+=hugbear.srotation;
            hugbear.position[0] += hugbear.sx;
            hugbear.position[1] += hugbear.sy;
            if (hugbear.position[0] >= this.canvas.width || hugbear.position[0] <= 0) {
                hugbear.sx = -hugbear.sx;
            } else if (hugbear.position[1] >= this.canvas.height || hugbear.position[1] <= 0) {
                hugbear.sy = -hugbear.sy;
            }
            this.context.save();
            this.context.translate(hugbear.position[0] + this.img.width/2, hugbear.position[1] + this.img.height/2);
            this.context.rotate(hugbear.rotation);
            this.context.drawImage(this.img, -this.img.width/2, -this.img.height/2);//, this.img.width, this.img.height);
            
            if (this.texting[i]) {
                this.drawText();
                if (this.texting[i] <= date.getTime()) {
                    delete this.texting[i];
                }
            }
            this.context.restore();
        }
    },
    hide: function() {
        if (localStorage && localStorage.setItem) {
            localStorage.setItem('hugbears_activated', false);
        }
        this.activated = false;
    },
    toggle: function() {
        if (this.activated) {
            this.hide();
        } else {
            this.show();
        }
    }
};
{% if autoplay %}
{{ objname }}.show();
{% else %}
if (localStorage && localStorage.getItem && localStorage.getItem('hugbears_activated') == 'true') {
    {{ objname }}.show();
}
{% endif %}

</script>
